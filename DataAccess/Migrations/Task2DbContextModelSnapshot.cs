// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(Task2DbContext))]
    partial class Task2DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("course_id")
                        .HasComment("Уникальный идентификатор курса (AI)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("course_name");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id")
                        .HasComment("Внешний ключ к таблице преподавателей (кто ведет курс)");

                    b.HasKey("CourseId")
                        .HasName("courses_pkey");

                    b.HasIndex(new[] { "TeacherId" }, "idx_courses_teacher_id");

                    b.ToTable("courses", null, t =>
                        {
                            t.HasComment("Таблица учебных дисциплин (курсов)");
                        });
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("department_id")
                        .HasComment("Уникальный идентификатор кафедры (AI)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("department_name")
                        .HasComment("Название кафедры");

                    b.HasKey("DepartmentId")
                        .HasName("departments_pkey");

                    b.HasIndex(new[] { "DepartmentName" }, "departments_department_name_key")
                        .IsUnique();

                    b.ToTable("departments", null, t =>
                        {
                            t.HasComment("Таблица кафедр колледжа");
                        });
                });

            modelBuilder.Entity("Domain.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("grade_id")
                        .HasComment("Уникальный идентификатор оценки (AI)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GradeId"));

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<DateOnly>("GradingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("grading_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score")
                        .HasComment("Количество набранных баллов");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer")
                        .HasColumnName("submission_id")
                        .HasComment("Внешний ключ к таблице сданных работ (за какую работу оценка)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id")
                        .HasComment("Внешний ключ к таблице преподавателей (кто оценил)");

                    b.HasKey("GradeId")
                        .HasName("grades_pkey");

                    b.HasIndex(new[] { "SubmissionId" }, "grades_submission_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "SubmissionId" }, "idx_grades_submission_id");

                    b.HasIndex(new[] { "TeacherId" }, "idx_grades_teacher_id");

                    b.ToTable("grades", null, t =>
                        {
                            t.HasComment("Таблица оценок, выставленных преподавателями за сданные работы");
                        });
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("group_id")
                        .HasComment("Уникальный идентификатор группы (AI)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupId"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("group_name")
                        .HasComment("Название группы (например, ИСП-421)");

                    b.HasKey("GroupId")
                        .HasName("groups_pkey");

                    b.HasIndex(new[] { "GroupName" }, "groups_group_name_key")
                        .IsUnique();

                    b.ToTable("groups", null, t =>
                        {
                            t.HasComment("Таблица учебных групп колледжа");
                        });
                });

            modelBuilder.Entity("Domain.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("project_id")
                        .HasComment("Уникальный идентификатор проекта (AI)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id")
                        .HasComment("Внешний ключ к таблице курсов (к какой дисциплине относится проект)");

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date")
                        .HasColumnName("deadline")
                        .HasComment("Крайний срок сдачи проекта");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("MaxScore")
                        .HasColumnType("integer")
                        .HasColumnName("max_score")
                        .HasComment("Максимально возможный балл за проект");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("project_name");

                    b.HasKey("ProjectId")
                        .HasName("projects_pkey");

                    b.HasIndex(new[] { "CourseId" }, "idx_projects_course_id");

                    b.ToTable("projects", null, t =>
                        {
                            t.HasComment("Таблица проектов, назначаемых по дисциплинам");
                        });
                });

            modelBuilder.Entity("Domain.Models.Projectteam", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("team_id")
                        .HasComment("Уникальный идентификатор команды (AI)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeamId"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id")
                        .HasComment("Внешний ключ к таблице проектов (над каким проектом работает команда)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("team_name");

                    b.HasKey("TeamId")
                        .HasName("projectteams_pkey");

                    b.HasIndex(new[] { "ProjectId" }, "idx_projectteams_project_id");

                    b.ToTable("projectteams", null, t =>
                        {
                            t.HasComment("Таблица команд, создаваемых для работы над проектами");
                        });
                });

            modelBuilder.Entity("Domain.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("student_id")
                        .HasComment("Уникальный идентификатор студента (AI)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id")
                        .HasComment("Внешний ключ к таблице учебных групп");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.HasKey("StudentId")
                        .HasName("students_pkey");

                    b.HasIndex(new[] { "GroupId" }, "idx_students_group_id");

                    b.HasIndex(new[] { "LastName" }, "idx_students_last_name");

                    b.ToTable("students", null, t =>
                        {
                            t.HasComment("Таблица студентов");
                        });
                });

            modelBuilder.Entity("Domain.Models.Studentteam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("student_id")
                        .HasComment("Внешний ключ к таблице студентов");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id")
                        .HasComment("Внешний ключ к таблице команд");

                    b.HasKey("Id")
                        .HasName("studentteams_pkey");

                    b.HasIndex(new[] { "StudentId" }, "idx_studentteams_student_id");

                    b.HasIndex(new[] { "TeamId" }, "idx_studentteams_team_id");

                    b.HasIndex(new[] { "StudentId", "TeamId" }, "unique_student_in_team")
                        .IsUnique();

                    b.ToTable("studentteams", null, t =>
                        {
                            t.HasComment("Таблица для связи многие-ко-многим между Студентами и Командами");
                        });
                });

            modelBuilder.Entity("Domain.Models.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("submission_id")
                        .HasComment("Уникальный идентификатор отправки (AI)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubmissionId"));

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_path");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Сдано'::character varying")
                        .HasComment("Текущий статус проверки работы");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("submission_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id")
                        .HasComment("Внешний ключ к таблице этапов (какой этап сдан)");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id")
                        .HasComment("Внешний ключ к таблице команд (какая команда сдала)");

                    b.HasKey("SubmissionId")
                        .HasName("submissions_pkey");

                    b.HasIndex(new[] { "TaskId" }, "idx_submissions_task_id");

                    b.HasIndex(new[] { "TeamId" }, "idx_submissions_team_id");

                    b.ToTable("submissions", null, t =>
                        {
                            t.HasComment("Таблица сданных студенческих работ (по этапам)");
                        });
                });

            modelBuilder.Entity("Domain.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_id")
                        .HasComment("Уникальный идентификатор этапа (AI)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id")
                        .HasComment("Внешний ключ к таблице проектов (в рамках какого проекта этап)");

                    b.Property<DateOnly>("TaskDeadline")
                        .HasColumnType("date")
                        .HasColumnName("task_deadline");

                    b.Property<int>("TaskMaxScore")
                        .HasColumnType("integer")
                        .HasColumnName("task_max_score")
                        .HasComment("Максимальный балл за данный этап");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("task_name");

                    b.HasKey("TaskId")
                        .HasName("tasks_pkey");

                    b.HasIndex(new[] { "ProjectId" }, "idx_tasks_project_id");

                    b.ToTable("tasks", null, t =>
                        {
                            t.HasComment("Таблица этапов (задач) в рамках проекта");
                        });
                });

            modelBuilder.Entity("Domain.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id")
                        .HasComment("Уникальный идентификатор преподавателя (AI)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeacherId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id")
                        .HasComment("Внешний ключ к таблице кафедр");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.HasKey("TeacherId")
                        .HasName("teachers_pkey");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_teachers_department_id");

                    b.ToTable("teachers", null, t =>
                        {
                            t.HasComment("Таблица преподавателей");
                        });
                });

            modelBuilder.Entity("Domain.Models.Course", b =>
                {
                    b.HasOne("Domain.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_courses_teacher");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Models.Grade", b =>
                {
                    b.HasOne("Domain.Models.Submission", "Submission")
                        .WithOne("Grade")
                        .HasForeignKey("Domain.Models.Grade", "SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_submission");

                    b.HasOne("Domain.Models.Teacher", "Teacher")
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_grades_teacher");

                    b.Navigation("Submission");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Models.Project", b =>
                {
                    b.HasOne("Domain.Models.Course", "Course")
                        .WithMany("Projects")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Models.Projectteam", b =>
                {
                    b.HasOne("Domain.Models.Project", "Project")
                        .WithMany("Projectteams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_project");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Models.Student", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_students_group");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Domain.Models.Studentteam", b =>
                {
                    b.HasOne("Domain.Models.Student", "Student")
                        .WithMany("Studentteams")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_studentteams_student");

                    b.HasOne("Domain.Models.Projectteam", "Team")
                        .WithMany("Studentteams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_studentteams_team");

                    b.Navigation("Student");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Models.Submission", b =>
                {
                    b.HasOne("Domain.Models.Task", "Task")
                        .WithMany("Submissions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_task");

                    b.HasOne("Domain.Models.Projectteam", "Team")
                        .WithMany("Submissions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_team");

                    b.Navigation("Task");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Models.Task", b =>
                {
                    b.HasOne("Domain.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_project");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Models.Teacher", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_teachers_department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.Course", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Models.Project", b =>
                {
                    b.Navigation("Projectteams");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Models.Projectteam", b =>
                {
                    b.Navigation("Studentteams");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Domain.Models.Student", b =>
                {
                    b.Navigation("Studentteams");
                });

            modelBuilder.Entity("Domain.Models.Submission", b =>
                {
                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Domain.Models.Task", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Domain.Models.Teacher", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Grades");
                });
#pragma warning restore 612, 618
        }
    }
}
